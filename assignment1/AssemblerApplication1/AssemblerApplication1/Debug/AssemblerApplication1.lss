
AVRASM ver. 2.2.8  C:\Users\Grachus\OneDrive\Desktop\EE443\lab assignments\assignment1\AssemblerApplication1\AssemblerApplication1\main_7.asm Thu Dec 28 00:12:07 2023

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\Atmel\ATmega_DFP\1.7.374\avrasm\inc\m8Adef.inc'
C:\Users\Grachus\OneDrive\Desktop\EE443\lab assignments\assignment1\AssemblerApplication1\AssemblerApplication1\main_7.asm(26): Including file 'C:\Users\Grachus\OneDrive\Desktop\EE443\lab assignments\assignment1\AssemblerApplication1\AssemblerApplication1\macros.asm'
C:\Users\Grachus\OneDrive\Desktop\EE443\lab assignments\assignment1\AssemblerApplication1\AssemblerApplication1\main_7.asm(27): Including file 'C:\Users\Grachus\OneDrive\Desktop\EE443\lab assignments\assignment1\AssemblerApplication1\AssemblerApplication1\display.asm'
C:\Users\Grachus\OneDrive\Desktop\EE443\lab assignments\assignment1\AssemblerApplication1\AssemblerApplication1\main_7.asm(28): Including file 'C:\Users\Grachus\OneDrive\Desktop\EE443\lab assignments\assignment1\AssemblerApplication1\AssemblerApplication1\functions.asm'
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\Atmel\ATmega_DFP\1.7.374\avrasm\inc\m8Adef.inc'
C:\Users\Grachus\OneDrive\Desktop\EE443\lab assignments\assignment1\AssemblerApplication1\AssemblerApplication1\main_7.asm(26): Including file 'C:\Users\Grachus\OneDrive\Desktop\EE443\lab assignments\assignment1\AssemblerApplication1\AssemblerApplication1\macros.asm'
C:\Users\Grachus\OneDrive\Desktop\EE443\lab assignments\assignment1\AssemblerApplication1\AssemblerApplication1\main_7.asm(27): Including file 'C:\Users\Grachus\OneDrive\Desktop\EE443\lab assignments\assignment1\AssemblerApplication1\AssemblerApplication1\display.asm'
C:\Users\Grachus\OneDrive\Desktop\EE443\lab assignments\assignment1\AssemblerApplication1\AssemblerApplication1\main_7.asm(28): Including file 'C:\Users\Grachus\OneDrive\Desktop\EE443\lab assignments\assignment1\AssemblerApplication1\AssemblerApplication1\functions.asm'
                                 
                                 /*
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega8A.xml ************
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m8Adef.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega8A
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega8A
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M8ADEF_INC_
                                 #define _M8ADEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega8A
                                 #pragma AVRPART ADMIN PART_NAME ATmega8A
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x93
                                 .equ	SIGNATURE_002	= 0x07
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2E
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	GICR	= 0x3b
                                 .equ	GIFR	= 0x3a
                                 .equ	TIMSK	= 0x39
                                 .equ	TIFR	= 0x38
                                 .equ	SPMCR	= 0x37
                                 .equ	TWCR	= 0x36
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUCSR	= 0x34
                                 .equ	TCCR0	= 0x33
                                 .equ	TCNT0	= 0x32
                                 .equ	OSCCAL	= 0x31
                                 .equ	SFIOR	= 0x30
                                 .equ	TCCR1A	= 0x2f
                                 .equ	TCCR1B	= 0x2e
                                 .equ	TCNT1L	= 0x2c
                                 .equ	TCNT1H	= 0x2d
                                 .equ	OCR1AL	= 0x2a
                                 .equ	OCR1AH	= 0x2b
                                 .equ	OCR1BL	= 0x28
                                 .equ	OCR1BH	= 0x29
                                 .equ	ICR1L	= 0x26
                                 .equ	ICR1H	= 0x27
                                 .equ	TCCR2	= 0x25
                                 .equ	TCNT2	= 0x24
                                 .equ	OCR2	= 0x23
                                 .equ	ASSR	= 0x22
                                 .equ	WDTCR	= 0x21
                                 .equ	UBRRH	= 0x20
                                 .equ	UCSRC	= 0x20
                                 .equ	EEARL	= 0x1e
                                 .equ	EEARH	= 0x1f
                                 .equ	EEDR	= 0x1d
                                 .equ	EECR	= 0x1c
                                 .equ	PORTB	= 0x18
                                 .equ	DDRB	= 0x17
                                 .equ	PINB	= 0x16
                                 .equ	PORTC	= 0x15
                                 .equ	DDRC	= 0x14
                                 .equ	PINC	= 0x13
                                 .equ	PORTD	= 0x12
                                 .equ	DDRD	= 0x11
                                 .equ	PIND	= 0x10
                                 .equ	SPDR	= 0x0f
                                 .equ	SPSR	= 0x0e
                                 .equ	SPCR	= 0x0d
                                 .equ	UDR	= 0x0c
                                 .equ	UCSRA	= 0x0b
                                 .equ	UCSRB	= 0x0a
                                 .equ	UBRRL	= 0x09
                                 .equ	ACSR	= 0x08
                                 .equ	ADMUX	= 0x07
                                 .equ	ADCSRA	= 0x06
                                 .equ	ADCL	= 0x04
                                 .equ	ADCH	= 0x05
                                 .equ	TWDR	= 0x03
                                 .equ	TWAR	= 0x02
                                 .equ	TWSR	= 0x01
                                 .equ	TWBR	= 0x00
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; SFIOR - Special Function IO Register
                                 .equ	ACME	= 3	; Analog Comparator Multiplexer Enable
                                 
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; GICR - General Interrupt Control Register
                                 .equ	GIMSK	= GICR	; For compatibility
                                 .equ	IVCE	= 0	; Interrupt Vector Change Enable
                                 .equ	IVSEL	= 1	; Interrupt Vector Select
                                 .equ	INT0	= 6	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 7	; External Interrupt Request 1 Enable
                                 
                                 ; GIFR - General Interrupt Flag Register
                                 .equ	INTF0	= 6	; External Interrupt Flag 0
                                 .equ	INTF1	= 7	; External Interrupt Flag 1
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
                                 .equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
                                 .equ	ISC10	= 2	; Interrupt Sense Control 1 Bit 0
                                 .equ	ISC11	= 3	; Interrupt Sense Control 1 Bit 1
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TIMSK - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 
                                 ; TCCR0 - Timer/Counter0 Control Register
                                 .equ	CS00	= 0	; Clock Select0 bit 0
                                 .equ	CS01	= 1	; Clock Select0 bit 1
                                 .equ	CS02	= 2	; Clock Select0 bit 2
                                 
                                 ; TCNT0 - Timer Counter 0
                                 .equ	TCNT00	= 0	; Timer Counter 0 bit 0
                                 .equ	TCNT01	= 1	; Timer Counter 0 bit 1
                                 .equ	TCNT02	= 2	; Timer Counter 0 bit 2
                                 .equ	TCNT03	= 3	; Timer Counter 0 bit 3
                                 .equ	TCNT04	= 4	; Timer Counter 0 bit 4
                                 .equ	TCNT05	= 5	; Timer Counter 0 bit 5
                                 .equ	TCNT06	= 6	; Timer Counter 0 bit 6
                                 .equ	TCNT07	= 7	; Timer Counter 0 bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE1	= 2	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1B	= 3	; Timer/Counter1 Output CompareB Match Interrupt Enable
                                 .equ	OCIE1A	= 4	; Timer/Counter1 Output CompareA Match Interrupt Enable
                                 .equ	TICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag register
                                 .equ	TOV1	= 2	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1B	= 3	; Output Compare Flag 1B
                                 .equ	OCF1A	= 4	; Output Compare Flag 1A
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	PWM10	= WGM10	; For compatibility
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	PWM11	= WGM11	; For compatibility
                                 .equ	FOC1B	= 2	; Force Output Compare 1B
                                 .equ	FOC1A	= 3	; Force Output Compare 1A
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Compare Ouput Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	CTC10	= WGM12	; For compatibility
                                 .equ	CTC1	= WGM12	; For compatibility
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	CTC11	= WGM13	; For compatibility
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 6	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	OCIE2	= 7	; Timer/Counter2 Output Compare Match Interrupt Enable
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 6	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2	= 7	; Output Compare Flag 2
                                 
                                 ; TCCR2 - Timer/Counter2 Control Register
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM21	= 3	; Waveform Generation Mode
                                 .equ	CTC2	= WGM21	; For compatibility
                                 .equ	COM20	= 4	; Compare Output Mode bit 0
                                 .equ	COM21	= 5	; Compare Output Mode bit 1
                                 .equ	WGM20	= 6	; Waveform Genration Mode
                                 .equ	PWM2	= WGM20	; For compatibility
                                 .equ	FOC2	= 7	; Force Output Compare
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2 - Timer/Counter2 Output Compare Register
                                 .equ	OCR2_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2UB	= 0	; Timer/counter Control Register2 Update Busy
                                 .equ	OCR2UB	= 1	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 2	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 3	; Asynchronous Timer/counter2
                                 
                                 ; SFIOR - Special Function IO Register
                                 .equ	PSR2	= 1	; Prescaler Reset Timer/Counter2
                                 
                                 
                                 ; ***** USART ************************
                                 ; UDR - USART I/O Data Register
                                 .equ	UDR0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSRA - USART Control and Status Register A
                                 .equ	USR	= UCSRA	; For compatibility
                                 .equ	MPCM	= 0	; Multi-processor Communication Mode
                                 .equ	U2X	= 1	; Double the USART transmission speed
                                 .equ	UPE	= 2	; Parity Error
                                 .equ	PE	= UPE	; For compatibility
                                 .equ	DOR	= 3	; Data overRun
                                 .equ	FE	= 4	; Framing Error
                                 .equ	UDRE	= 5	; USART Data Register Empty
                                 .equ	TXC	= 6	; USART Transmitt Complete
                                 .equ	RXC	= 7	; USART Receive Complete
                                 
                                 ; UCSRB - USART Control and Status Register B
                                 .equ	UCR	= UCSRB	; For compatibility
                                 .equ	TXB8	= 0	; Transmit Data Bit 8
                                 .equ	RXB8	= 1	; Receive Data Bit 8
                                 .equ	UCSZ2	= 2	; Character Size
                                 .equ	CHR9	= UCSZ2	; For compatibility
                                 .equ	TXEN	= 3	; Transmitter Enable
                                 .equ	RXEN	= 4	; Receiver Enable
                                 .equ	UDRIE	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSRC - USART Control and Status Register C
                                 .equ	UCPOL	= 0	; Clock Polarity
                                 .equ	UCSZ0	= 1	; Character Size
                                 .equ	UCSZ1	= 2	; Character Size
                                 .equ	USBS	= 3	; Stop Bit Select
                                 .equ	UPM0	= 4	; Parity Mode Bit 0
                                 .equ	UPM1	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL	= 6	; USART Mode Select
                                 .equ	URSEL	= 7	; Register Select
                                 
                                 .equ	UBRRHI	= UBRRH	; For compatibility
                                 
                                 ; ***** TWI **************************
                                 ; TWBR - TWI Bit Rate register
                                 .equ	I2BR	= TWBR	; For compatibility
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	I2CR	= TWCR	; For compatibility
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	I2IE	= TWIE	; For compatibility
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	I2EN	= TWEN	; For compatibility
                                 .equ	ENI2C	= TWEN	; For compatibility
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	I2WC	= TWWC	; For compatibility
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	I2STO	= TWSTO	; For compatibility
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	I2STA	= TWSTA	; For compatibility
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	I2EA	= TWEA	; For compatibility
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 .equ	I2INT	= TWINT	; For compatibility
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	I2SR	= TWSR	; For compatibility
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWS0	= TWPS0	; For compatibility
                                 .equ	I2GCE	= TWPS0	; For compatibility
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS1	= TWPS1	; For compatibility
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	I2S3	= TWS3	; For compatibility
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	I2S4	= TWS4	; For compatibility
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	I2S5	= TWS5	; For compatibility
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	I2S6	= TWS6	; For compatibility
                                 .equ	TWS7	= 7	; TWI Status
                                 .equ	I2S7	= TWS7	; For compatibility
                                 
                                 ; TWDR - TWI Data register
                                 .equ	I2DR	= TWDR	; For compatibility
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	I2AR	= TWAR	; For compatibility
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCR - Watchdog Timer Control Register
                                 .equ	WDTCSR	= WDTCR	; For compatibility
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDCE	= 4	; Watchdog Change Enable
                                 .equ	WDTOE	= WDCE	; For compatibility
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEWE	= 1	; EEPROM Write Enable
                                 .equ	EEMWE	= 2	; EEPROM Master Write Enable
                                 .equ	EEWEE	= EEMWE	; For compatibility
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 ;.equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
                                 ;.equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
                                 ;.equ	ISC10	= 2	; Interrupt Sense Control 1 Bit 0
                                 ;.equ	ISC11	= 3	; Interrupt Sense Control 1 Bit 1
                                 .equ	SM0	= 4	; Sleep Mode Select
                                 .equ	SM1	= 5	; Sleep Mode Select
                                 .equ	SM2	= 6	; Sleep Mode Select
                                 .equ	SE	= 7	; Sleep Enable
                                 
                                 ; MCUCSR - MCU Control And Status Register
                                 .equ	MCUSR	= MCUCSR	; For compatibility
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; SPMCR - Store Program Memory Control Register
                                 .equ	SPMEN	= 0	; Store Program Memory Enable
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read-While-Write Section Read Enable
                                 .equ	RWWSB	= 6	; Read-While-Write Section Busy
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 ; SFIOR - Special Function IO Register
                                 .equ	PSR10	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	PUD	= 2	; Pull-up Disable
                                 .equ	ADHSM	= 4	; ADC High Speed Mode
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register
                                 .equ	ADCSR	= ADCSRA	; For compatibility
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADFR	= 5	; ADC  Free Running Select
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	BODEN	= 6	; Brown out detector enable
                                 .equ	BODLEVEL	= 7	; Brown out detector trigger level
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select Reset Vector
                                 .equ	BOOTSZ0	= 1	; Select Boot Size
                                 .equ	BOOTSZ1	= 2	; Select Boot Size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	CKOPT	= 4	; Oscillator Options
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	WTDON	= 6	; Enable watchdog
                                 .equ	RSTDISBL	= 7	; Disable reset
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x0fff	; Note: Word address
                                 .equ	IOEND	= 0x003f
                                 .equ	SRAM_START	= 0x0060
                                 .equ	SRAM_SIZE	= 1024
                                 .equ	RAMEND	= 0x045f
                                 .equ	XRAMEND	= 0x0000
                                 .equ	E2END	= 0x01ff
                                 .equ	EEPROMEND	= 0x01ff
                                 .equ	EEADRBITS	= 9
                                 #pragma AVRPART MEMORY PROG_FLASH 8192
                                 #pragma AVRPART MEMORY EEPROM 512
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 1024
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0xc00
                                 .equ	NRWW_STOP_ADDR	= 0xfff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0xbff
                                 .equ	PAGESIZE	= 32
                                 .equ	FIRSTBOOTSTART	= 0xf80
                                 .equ	SECONDBOOTSTART	= 0xf00
                                 .equ	THIRDBOOTSTART	= 0xe00
                                 .equ	FOURTHBOOTSTART	= 0xc00
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0001	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0002	; External Interrupt Request 1
                                 .equ	OC2addr	= 0x0003	; Timer/Counter2 Compare Match
                                 .equ	OVF2addr	= 0x0004	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x0005	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x0006	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x0007	; Timer/Counter1 Compare Match B
                                 .equ	OVF1addr	= 0x0008	; Timer/Counter1 Overflow
                                 .equ	OVF0addr	= 0x0009	; Timer/Counter0 Overflow
                                 .equ	SPIaddr	= 0x000a	; Serial Transfer Complete
                                 .equ	URXCaddr	= 0x000b	; USART, Rx Complete
                                 .equ	UDREaddr	= 0x000c	; USART Data Register Empty
                                 .equ	UTXCaddr	= 0x000d	; USART, Tx Complete
                                 .equ	ADCCaddr	= 0x000e	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x000f	; EEPROM Ready
                                 .equ	ACIaddr	= 0x0010	; Analog Comparator
                                 .equ	TWIaddr	= 0x0011	; 2-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0012	; Store Program Memory Ready
                                 
                                 .equ	INT_VECTORS_SIZE	= 19	; size in words
                                 
                                 #pragma AVRPART CORE INSTRUCTIONS_NOT_SUPPORTED break
                                 
                                 #endif  /* _M8ADEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                  * AsmFile1.asm
                                  *
                                  *  Created: 21/12/2023 00:21:22
                                  *   Author: Grachus
                                  */ 
                                 
                                    ; Replace with your application code
                                 ; ASSIGNMENT1.asm
                                 ;
                                 ; A-PD4, B-PD5, C-PD6, D-PD7, E-PB0, F-PC2, G-PC1, DP-PC0
                                 ; DIGIT1 CATHODE-PD3
                                 ; DIGIT2 CATHODE-PD1
                                 ; DIGIT3 CATHODE-PD0 
                                 ; LED FOR PWM-PB1
                                 ; PB2-BUTON WITH EXTERNAL PULL-UP RESISTANCE
                                 ; PD2-BUTON (INT0) WITHOUT EXTERNAL PULL-UP RESISTANCE
                                 .org 0x0000
000000 c120                      	rjmp on_reset
                                 
                                 .org 0x0004
000004 c111                      	rjmp isr_t2
                                 .org 0x0009
000009 c10e                      	rjmp isr_t0
                                 
                                 .include "macros.asm"
                                 
                                  * AsmFile1.asm
                                  *
                                  *  Created: 15/11/2023 19:36:48
                                  *   Author: Grachus
                                  */ 
                                  .macro stackreg
                                 
                                 	;stack pointer setup
                                 	ldi r16, HIGH(RAMEND)
                                     out SPH, r16
                                     ldi r16, LOW(RAMEND)
                                     out SPL, r16	
                                 
                                 .endmacro
                                 
                                 .macro config
                                 
                                 ldi	R16, 0x03 
                                 out DDRB, R16 
                                 
                                 ldi	R16, 0x07 ; 
                                 out DDRC, R16 ;	led segment related bits are set as output
                                 
                                 ldi R16, 0xFF 
                                 out DDRD, R16 
                                 
                                 ;since we have no input need all bits may set up as output
                                 
                                 .endmacro
                                 
                                 
                                  .macro config_t0
                                 	ldi R16, (1<<CS02) 
                                 	OUT TCCR0, R16
                                 	ldi R16, TIMSK | (1<<TOIE0)
                                 	OUT TIMSK, R16
                                 .endmacro
                                 
                                  .macro config_t2
                                 	ldi R16, (1<<CS21) | (1<<CS20)
                                 	OUT TCCR2, R16 
                                 	ldi R16, TIMSK|(1<<TOIE2)
                                 	out TIMSK, R16 
                                 .endmacro
                                 
                                 .macro config_io
                                 	ldi r16, 0b00000001		;PB0 is set as output
                                 	out ddrb, r16
                                 
                                 	ldi r16, 0b00000111		; PC0 - PC1 - PC2 set as out
                                 	out ddrc, r16
                                 
                                 	sbi portd, 2			;pb2 pull-up active
                                 	ldi r16, 0b11111011		
                                 	out ddrd, r16			;all except the 2nd pin of portd set as output
                                 
                                 .endmacro
                                 
                                 .macro config_adc
                                 	ldi r16,0x00
                                 	out	ADMUX,r16		;RESET ADMUX
                                 	sbi	ADMUX,REFS0		;REFS0 AND REFS1 SET FOR VREF SELECTION
                                 	sbi	ADMUX,REFS1		;VREF=INTERNAL 2.56V
                                 	sbi	ADMUX,MUX0		;MUX0 SET AND MUX1 SET 
                                 	sbi	ADMUX,MUX1		;ACTIVE CHANNEL IS ADC3 
                                 
                                 	ldi r16,0x00	
                                 	out	ADCSRA,r16		;RESET ADCSRA	
                                 	sbi	ADCSRA,ADPS0	;PRESCALER ADJUSTMENT
                                 	sbi	ADCSRA,ADPS1	;ADPS0, ADPS1, ADPS2 ARE SET
                                 	sbi	ADCSRA,ADPS2	;PRESCLAER = CLK/128
                                 	sbi ADCSRA,ADEN		;ADC ENABLED
                                 	sbi	ADCSRA,ADIE		;ADC INTERRUPT ENABLED
                                 
                                 .endmacro
                                 
                                 
                                 .macro macro_display
                                 mov r2, @1
                                 mov r1,@0
                                 rcall conv_hextodec
                                 rcall display
                                 .endmacro
                                 
                                 
                                 .macro _read_set
                                 ldi r17,0x01
                                 ldi r18,0x00
                                 rcall EEPROM_read
                                 mov r14,r19
                                 
                                 ldi r17,0x02
                                 ldi r18,0x00
                                 rcall EEPROM_read
                                 mov r15,r19
                                 .endmacro
                                 
                                 .macro _check_eeprom
                                 	_read_set
                                 	ldi r16,0xFF
                                 	cpse r14,r16
                                 	rjmp END
                                 	rcall setr14_0
                                 	cpse r15,r16
                                 	rjmp END
                                 	rcall setr15_0
                                 	_read_set
                                 END:
                                 nop 
                                 .endmacro
                                 
                                 
                                 .macro save_set
                                 	LDI R17,0x01
                                 	LDI R18,0x00
                                 	MOV R19, @1;r14
                                 	RCALL EEPROM_write
                                 WAIT_LOW:	
                                 	SBIC  EECR, EEWE	
                                 	RJMP  WAIT_LOW	; Wait for completion of previous write
                                 
                                 	LDI R17,0x02
                                 	LDI R18,0x00
                                 	MOV R19, @0;r15
                                 	RCALL EEPROM_write
                                 WAIT_HIGH:	
                                 	SBIC  EECR, EEWE	
                                 	RJMP  WAIT_HIGH	; Wait for completion of previous�write
                                 .endmacro
                                 
                                 .macro _check_eeprom1
                                 	_read_set
                                 .endmacro
                                 
                                 
                                 /*.macro save_set
                                 ldi r17,0x01
                                 ldi r18,0x00
                                 ldi r19,100
                                 rcall EEPROM_write
                                 
                                 ldi r17,0x02
                                 ldi r18,0x00
                                 ldi r19,0
                                 rcall EEPROM_write
                                 .endmacro*/
                                 
                                 .include "display.asm"
                                 
                                  * AsmFile1.asm
                                  *
                                  *  Created: 15/11/2023 19:39:28
                                  *   Author: Grachus
                                  */ 
                                  display:
00000a 2d05                      	mov r16,r5
00000b d00b                      	rcall digit
00000c 9a93                      	sbi portd, pd3	;digit1
00000d d01e                      	rcall reset_digits
                                 
00000e 2d06                      	mov r16,r6
00000f d007                      	rcall digit
000010 9a91                      	sbi portd, pd1	;digit2
000011 d01a                      	rcall reset_digits
                                 
000012 2d07                      	mov r16,r7
000013 d003                      	rcall digit
000014 9a90                      	sbi portd, pd0	;digit3
000015 d016                      	rcall reset_digits
                                 
000016 9508                      ret
                                 
                                 ;compare section
                                 
                                 digit:
000017 3000                      	cpi r16, 0
000018 f0b9                      	breq label_zero
                                 
000019 3001                      	cpi r16, 1
00001a f0b9                      	breq label_one
                                 
00001b 3002                      	cpi r16, 2
00001c f0b9                      	breq label_two
                                 
00001d 3003                      	cpi r16, 3
00001e f0b9                      	breq label_three
                                 
00001f 3004                      	cpi r16, 4
000020 f0b9                      	breq label_four
                                 
000021 3005                      	cpi r16, 5
000022 f0b9                      	breq label_five
                                 
000023 3006                      	cpi r16, 6
000024 f0b9                      	breq label_six
                                 
000025 3007                      	cpi r16, 7
000026 f0b9                      	breq label_seven
                                 
000027 3008                      	cpi r16, 8
000028 f0b9                      	breq label_eight
                                 
000029 3009                      	cpi r16, 9
00002a f0b9                      	breq label_nine
                                 
00002b 9508                      ret
                                 
                                 reset_digits:
                                 
00002c 9893                      	cbi portd, pd3
00002d 9891                      	cbi portd, pd1
00002e 9890                      	cbi portd, pd0
                                 
00002f 9508                      ret
                                 
                                 label_zero:
000030 d013                      	rcall zero
000031 9508                      ret
                                 
                                 label_one:
000032 d019                      	rcall one
000033 9508                      ret
                                 
                                 label_two:
000034 d01f                      	rcall two
000035 9508                      ret
                                 
                                 label_three:
000036 d025                      	rcall three
000037 9508                      ret
                                 
                                 label_four:
000038 d02b                      	rcall four
000039 9508                      ret
                                 
                                 label_five:
00003a d031                      	rcall five
00003b 9508                      ret
                                 
                                 label_six:
00003c d037                      	rcall six
00003d 9508                      ret
                                 
                                 label_seven:
00003e d03d                      	rcall seven
00003f 9508                      ret
                                 
                                 label_eight:
000040 d043                      	rcall eight
000041 9508                      ret
                                 
                                 label_nine:
000042 d049                      	rcall nine
000043 9508                      ret
                                 
                                 ;printing asked digits referenced in labels
                                 
                                 zero:
000044 9a94                      	sbi portd, pd4; a
000045 9a95                      	sbi portd, pd5; b
000046 9a96                      	sbi portd, pd6; c
000047 9a97                      	sbi portd, pd7; d
000048 9ac0                      	sbi portb, pb0; e
000049 9aaa                      	sbi portc, pc2; f
00004a 98a9                      	cbi portc, pc1; g
00004b 9508                      ret
                                 
                                 one:
00004c 9894                      	cbi portd, pd4; a
00004d 9a95                      	sbi portd, pd5; b
00004e 9a96                      	sbi portd, pd6; c
00004f 9897                      	cbi portd, pd7; d
000050 98c0                      	cbi portb, pb0; e
000051 98aa                      	cbi portc, pc2; f
000052 98a9                      	cbi portc, pc1; g
000053 9508                      ret
                                 
                                 two:
000054 9a94                      	sbi portd, pd4; a
000055 9a95                      	sbi portd, pd5; b
000056 9896                      	cbi portd, pd6; c
000057 9a97                      	sbi portd, pd7; d
000058 9ac0                      	sbi portb, pb0; e
000059 98aa                      	cbi portc, pc2; f
00005a 9aa9                      	sbi portc, pc1; g
00005b 9508                      ret
                                 
                                 three:
00005c 9a94                      	sbi portd, pd4; a
00005d 9a95                      	sbi portd, pd5; b
00005e 9a96                      	sbi portd, pd6; c
00005f 9a97                      	sbi portd, pd7; d
000060 98c0                      	cbi portb, pb0; e
000061 98aa                      	cbi portc, pc2; f
000062 9aa9                      	sbi portc, pc1; g
000063 9508                      ret
                                 
                                 four:
000064 9894                      	cbi portd, pd4; a
000065 9a95                      	sbi portd, pd5; b
000066 9a96                      	sbi portd, pd6; c
000067 9897                      	cbi portd, pd7; d
000068 98c0                      	cbi portb, pb0; e
000069 9aaa                      	sbi portc, pc2; f
00006a 9aa9                      	sbi portc, pc1; g
00006b 9508                      ret
                                 
                                 five:
00006c 9a94                      	sbi portd, pd4; a
00006d 9895                      	cbi portd, pd5; b
00006e 9a96                      	sbi portd, pd6; c
00006f 9a97                      	sbi portd, pd7; d
000070 98c0                      	cbi portb, pb0; e
000071 9aaa                      	sbi portc, pc2; f
000072 9aa9                      	sbi portc, pc1; g
000073 9508                      ret
                                 
                                 six:
000074 9a94                      	sbi portd, pd4; a
000075 9895                      	cbi portd, pd5; b
000076 9a96                      	sbi portd, pd6; c
000077 9a97                      	sbi portd, pd7; d
000078 9ac0                      	sbi portb, pb0; e
000079 9aaa                      	sbi portc, pc2; f
00007a 9aa9                      	sbi portc, pc1; g
00007b 9508                      ret
                                 
                                 seven:
00007c 9a94                      	sbi portd, pd4; a
00007d 9a95                      	sbi portd, pd5; b
00007e 9a96                      	sbi portd, pd6; c
00007f 9897                      	cbi portd, pd7; d
000080 98c0                      	cbi portb, pb0; e
000081 98aa                      	cbi portc, pc2; f
000082 98a9                      	cbi portc, pc1; g
000083 9508                      ret
                                 
                                 eight:
000084 9a94                      	sbi portd, pd4; a
000085 9a95                      	sbi portd, pd5; b
000086 9a96                      	sbi portd, pd6; c
000087 9a97                      	sbi portd, pd7; d
000088 9ac0                      	sbi portb, pb0; e
000089 9aaa                      	sbi portc, pc2; f
00008a 9aa9                      	sbi portc, pc1; g
00008b 9508                      ret
                                 
                                 nine:
00008c 9a94                      	sbi portd, pd4; a
00008d 9a95                      	sbi portd, pd5; b
00008e 9a96                      	sbi portd, pd6; c
00008f 9a97                      	sbi portd, pd7; d
000090 98c0                      	cbi portb, pb0; e
000091 9aaa                      	sbi portc, pc2; f
000092 9aa9                      	sbi portc, pc1; g
000093 9508                      ret
                                 
                                 
                                 
                                 .include "functions.asm"
                                 
                                  * AsmFile1.asm
                                  *
                                  *  Created: 28/11/2023 19:34:10
                                  *   Author: Grachus
                                  */ 
                                 
                                  /*
                                 r1=Low Byte Hex Number and r2=High Byte Hex Number
                                 r3 and r4 = Divider Values
                                 Result Digits r5-r6-r7-r8-r9
                                 Hex Number : r1=0x03, r2=0XB9
                                 Result : r9 r8 r7 r6 r5
                                 		   0 0 9 5 3 
                                 */
                                 
                                 ; 0x03B9 -> to decimal
                                 
                                 step_count: 
                                 	 
000094 ef7f                      	ldi r23,0xFF 
000095 ee87                      	ldi r24,0xE7 
000096 e093                      	ldi r25,0x03 
000097 16e8                      	cp r14, r24 ; COMPARE LOW BYTE 
000098 06f9                      	cpc r15, r25 ; COMPARE HIGH BYTE
000099 f039                      	breq backtozero ; IF Z=1 BRANCH 
                                 	
00009a 94e3                      	inc r14 
00009b 16e7                      	cp r14, R23 
00009c f009                      	breq inc_high 
00009d 9508                      	ret
                                 inc_high: 
00009e 24ee                      	clr r14 
00009f 94f3                      	inc r15 
0000a0 9508                      ret
                                 	backtozero: 
0000a1 24ee                      	clr r14 
0000a2 24ff                      	clr r15 
0000a3 9508                      ret
                                 	 
                                 
                                 
                                 conv_hextodec:
0000a4 e207                      	ldi r16, HIGH(10000)
0000a5 2e40                      	mov r4, r16 
0000a6 e100                      	ldi r16, LOW(10000)
0000a7 2e30                      	mov r3, r16 
0000a8 d014                      	rcall DEC_DIG
0000a9 2e90                      	mov r9, r16 
                                 
                                 
0000aa e003                      	ldi r16, HIGH(1000)
0000ab 2e40                      	mov r4, r16
0000ac ee08                      	ldi r16, LOW(1000)
0000ad 2e30                      	mov r3, r16
0000ae d00e                      	rcall DEC_DIG
0000af 2e80                      	mov r8, r16 
                                 
                                 
0000b0 2444                      	clr r4
0000b1 e604                      	ldi r16, 100
0000b2 2e30                      	mov r3, r16
0000b3 d009                      	rcall DEC_DIG
0000b4 2e70                      	mov r7, r16 
                                 
0000b5 e00a                      	ldi r16, 10 
0000b6 2e30                      	mov r3, r16
0000b7 d005                      	rcall DEC_DIG
0000b8 2e60                      	mov r6, r16 
                                 
0000b9 e000                      	ldi r16, 0 
0000ba 0d01                      	add r16, R1 
0000bb 2e50                      	mov r5, r16
0000bc 9508                      	ret 
                                 
                                 DEC_DIG:
0000bd e000                      	ldi r16, 0 
                                 DEC_DIG1:
0000be 1413                      	cp r1, r3
0000bf 0424                      	cpc r2, r4
0000c0 f408                      	brcc DEC_DIG2
0000c1 9508                      	ret 
                                 DEC_DIG2:
0000c2 1813                      	sub r1, r3 
0000c3 0824                      	sbc r2, r4 
0000c4 9503                      	inc r16
0000c5 cff8                      	rjmp DEC_DIG1
                                 
                                 
                                 
                                 PressedButtonB:
0000c6 fff0                      	sbrs r31, 0
0000c7 d001                      	rcall DEC_d
0000c8 9518                      	reti
                                 DEC_d:
0000c9 e0f1                      	ldi r31, 00000001
0000ca 94ea                      	dec r14 
0000cb 9508                      	ret 
                                 
                                 PressedButtonD:
0000cc ffe0                      	sbrs r30, 0
0000cd d001                      	rcall INC_d
0000ce 9508                      	ret 
                                 INC_d:
0000cf e0e1                      	ldi r30, 00000001
                                 	;save_set r15,r14
0000d0 94e3                      	inc r14 
0000d1 9508                      	ret
                                 
                                 UnPressedButtonD:
0000d2 e0e0                      	ldi r30, 0
0000d3 9508                      	ret
                                 
                                 UnPressedButtonB:
0000d4 e0f0                      	ldi r31, 0
0000d5 9508                      	ret
                                 
                                 checkBothButton:
0000d6 99b2                      	sbic pinb, pinb2
0000d7 9508                      	ret
0000d8 9982                      	sbic pind, pind2
0000d9 9508                      	ret
0000da d001                      	rcall BothPressed
0000db 9508                      	ret
                                 
                                 BothPressed:
                                 	;rcall Set100
0000dc e011
0000dd e020
0000de 2d3e
0000df d00c
0000e0 99e1
0000e1 cffe
0000e2 e012
0000e3 e020
0000e4 2d3f
0000e5 d006
0000e6 99e1
0000e7 cffe                      	save_set r15,r14
0000e8 9508                      	ret
                                 
                                 Set100:
0000e9 e694                      	ldi r25, 0x64
0000ea 2ee9                      	mov r14, r25 
0000eb 9508                      	ret 
                                 
                                 
                                 EEPROM_write:
0000ec 94f8                      cli
0000ed 99e1                      sbic EECR, EEWE
0000ee cffd                      rjmp EEPROM_write ; Wait for completion of previous write
0000ef bb2f                      out EEARH, r18 ; Set up address (r18:r17) in address register
0000f0 bb1e                      out EEARL, r17
0000f1 bb3d                      out EEDR, r19 ; Write data (r16) to data register
0000f2 9ae2                      sbi EECR, EEMWE ; Write logical one to EEMWE
0000f3 9ae1                      sbi EECR, EEWE ; Start eeprom write by setting EEWE
0000f4 9478                      sei
0000f5 9508                      ret
                                 
                                 EEPROM_read:
0000f6 94f8                      cli
0000f7 99e1                      sbic EECR,EEWE ; Wait for completion of previous write
0000f8 cffd                      rjmp EEPROM_read
0000f9 bb2f                      out EEARH, r18 ; Set up address (r18:r17) in address register
0000fa bb1e                      out EEARL, r17
0000fb 9ae0                      sbi EECR,EERE ; Start eeprom read by writing EERE
0000fc b33d                      in r19,EEDR ; Read data from data register
0000fd 9478                      sei
0000fe 9508                      ret
                                 
                                 setr14_0:
0000ff e011                      	ldi r17,0x01
000100 e020                      	ldi r18,0x00
000101 e030                      	ldi r19,0
000102 dfe9                      	rcall EEPROM_write
000103 9508                      	ret
                                 setr15_0:
000104 e012                      	ldi r17,0x02
000105 e020                      	ldi r18,0x00
000106 e030                      	ldi r19,0
000107 dfe4                      	rcall EEPROM_write
000108 9508                      	ret
                                 
                                 
                                 
                                 
                                 delay_sec:
000109 e0a1                      		ldi		R26,0x01
00010a 2eca                      		mov		R12,R26
                                 
00010b efa0                      loop3:	ldi		R26,0xF0
00010c 2eba                      		mov		R11,R26
                                 
00010d efaf                      loop2:	ldi		R26,0xFF
00010e 2eaa                      		mov		R10,R26
                                 
00010f 94aa                      loop1:	dec		R10
000110 f7f1                      		brne	loop1 ; REPEAT UNTIL R10=0
000111 94ba                      		dec		R11
000112 f7d1                      		brne	loop2 ; REPEAT UNTIL  R11=0
000113 94ca                      		dec		R12
000114 f7b1                      		brne	loop3 ; REPEAT UNTIL R12=0
000115 9508                      
                                 isr_t2:
000116 0000                      	nop
000117 9518                      reti
                                 
                                 isr_t0:
000118 94f8                      	cli
000119 2c1e                      	mov r1,r14
00011a 2c2f                      	mov r2,r15
00011b df88                      	rcall conv_hextodec
00011c deed                      	rcall display
00011d ed0c                      	ldi r16, 220	; brightness
00011e bf02                      	out tcnt0 ,r16
00011f 9478                      	sei
000120 9518                      reti
                                 
                                 on_reset:
000121 2700                      	clr r16
000122 24ee                      	clr r14
000123 24ff                      	clr r15
000124 27dd                      	clr r29
000125 27ee                      	clr r30
000126 27ff                      	clr r31
000127 e004
000128 bf0e
000129 e50f
00012a bf0d                      	stackreg
00012b e001
00012c bb07
00012d e007
00012e bb04
00012f 9a92
000130 ef0b
000131 bb01                      	config_io
000132 e011
000133 e020
000134 dfc1
000135 2ee3
000136 e012
000137 e020
000138 dfbd
000139 2ef3
00013a ef0f
00013b 12e0
00013c c00c
00013d dfc1
00013e 12f0
00013f c009
000140 dfc3
000141 e011
000142 e020
000143 dfb2
000144 2ee3
000145 e012
000146 e020
000147 dfae
000148 2ef3
000149 0000                      	_check_eeprom
00014a e004
00014b bf03
00014c e309
00014d bf09                      	config_t0
00014e e003
00014f bd05
000150 e709
000151 bf09                      	config_t2
000152 9478                      	sei
000153 c000                      	rjmp main
                                 
                                 main:
                                 
000154 9bb2                      	sbis pinb, pinb2 
000155 df70                      	rcall PressedButtonB
                                 
000156 99b2                      	sbic pinb, pinb2 
000157 df7c                      	rcall UnPressedButtonB
                                 
000158 9b82                      	sbis pind, pind2 
000159 df72                      	rcall PressedButtonD
                                 
00015a 9982                      	sbic pind, pind2 
00015b df76                      	rcall UnPressedButtonD
                                 
00015c df79                      	rcall checkBothButton
                                 
                                 
                                 
                                 


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega8A" register use summary:
x  :   0 y  :   0 z  :   0 r0 :   0 r1 :   4 r2 :   3 r3 :   6 r4 :   5 
r5 :   2 r6 :   2 r7 :   2 r8 :   1 r9 :   1 r10:   2 r11:   2 r12:   2 
r13:   0 r14:  14 r15:   9 r16:  58 r17:  10 r18:  10 r19:  10 r20:   0 
r21:   0 r22:   0 r23:   2 r24:   2 r25:   4 r26:   6 r27:   0 r28:   0 
r29:   1 r30:   4 r31:   4 
Registers used: 25 out of 35 (71.4%)

"ATmega8A" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   0 add   :   1 adiw  :   0 and   :   0 
andi  :   0 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   1 brcs  :   0 breq  :  12 brge  :   0 brhc  :   0 brhs  :   0 
brid  :   0 brie  :   0 brlo  :   0 brlt  :   0 brmi  :   0 brne  :   3 
brpl  :   0 brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 brvs  :   0 
bset  :   0 bst   :   0 cbi   :  24 cbr   :   0 clc   :   0 clh   :   0 
cli   :   3 cln   :   0 clr   :  10 cls   :   0 clt   :   0 clv   :   0 
clz   :   0 com   :   0 cp    :   3 cpc   :   2 cpi   :  10 cpse  :   2 
dec   :   4 eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 
ijmp  :   0 in    :   1 inc   :   4 ld    :   0 ldd   :   0 ldi   :  48 
lds   :   0 lpm   :   0 lsl   :   0 lsr   :   0 mov   :  26 movw  :   0 
mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   2 or    :   0 
ori   :   0 out   :  15 pop   :   0 push  :   0 rcall :  40 ret   :  43 
reti  :   3 rjmp  :  12 rol   :   0 ror   :   0 sbc   :   1 sbci  :   0 
sbi   :  56 sbic  :   8 sbis  :   2 sbiw  :   0 sbr   :   0 sbrc  :   0 
sbrs  :   2 sec   :   0 seh   :   0 sei   :   4 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :   0 std   :   0 sts   :   0 sub   :   1 subi  :   0 swap  :   0 
tst   :   0 wdr   :   0 
Instructions used: 29 out of 110 (26.4%)

"ATmega8A" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0002bc    686      0    686    8192   8.4%
[.dseg] 0x000060 0x000060      0      0      0    1024   0.0%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 0 warnings
